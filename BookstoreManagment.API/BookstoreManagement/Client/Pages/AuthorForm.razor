@page "/addAuthor"
@using BookstoreManagement.Client.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime

<h1>Author Form</h1>
<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit" @onreset="HandleReset">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <div class="col">
            <label>First name</label>
            <InputText class="form-control" @bind-Value="model.FirstName"/>
            <ValidationMessage For="@(() => model.FirstName)" />
        </div>
        <div class="col">
            <label>Last name</label>
            <InputText class="form-control" @bind-Value="model.LastName"/>
            <ValidationMessage For="@(() => model.LastName)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            <label>Date of birth</label>
            <InputDate @bind-Value="model.AuthorDateOfBirth" class="form-control" />
            <ValidationMessage For="@(() => model.AuthorDateOfBirth)" />
        </div>
        <div class="col">
            <label>Place of birth</label>
            <InputText @bind-Value="model.AuthorPlaceOfBirth" class="form-control" />
            <ValidationMessage For="@(() => model.AuthorPlaceOfBirth)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            <label>Country</label>
            <InputText @bind-Value="model.Country" class="form-control" />
            <ValidationMessage For="@(() => model.Country)" />
        </div>
        <div class="col">
            <label>Contact</label>
            <InputText @bind-Value="model.Contact" class="form-control" />
            <ValidationMessage For="@(() => model.Contact)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <button type="reset" class="btn btn-warning">Reset</button>

</EditForm>

@code {
    private AuthorsForm model = new AuthorsForm();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        if (model != null)
            editContext = new EditContext(model);
    }

    private void HandleValidSubmit()
    {
        var modelJson = JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true });
        JSRuntime.InvokeVoidAsync("alert", $"SUCCESS!! :-)\n\n{modelJson}");
    }

    private void HandleReset()
    {
        model = new AuthorsForm();
        editContext = new EditContext(model);
    }
}
