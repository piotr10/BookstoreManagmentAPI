// <auto-generated />
using System;
using BookstoreManagement.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookstoreManagement.Persistance.Migrations
{
    [DbContext(typeof(BookstoreDbContext))]
    [Migration("20220918200446_reloadSedds")]
    partial class reloadSedds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8477),
                            CreatedBy = "",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8643),
                            CreatedBy = "",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.AuthorBiography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("AuthorBiographies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Country = "Poland",
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8731),
                            CreatedBy = "",
                            DateOfBirth = new DateTime(1846, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InactivatedBy = "",
                            ModifiedBy = "",
                            PlaceOfBirth = "Wola Okrzejska",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Country = "Poland",
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8739),
                            CreatedBy = "",
                            DateOfBirth = new DateTime(1921, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InactivatedBy = "",
                            ModifiedBy = "",
                            PlaceOfBirth = "Kraków",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.AuthorContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorContactDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorContactDetailTypeId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorContactDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorContactDetailTypeId = 2,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8769),
                            CreatedBy = "",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "No contacts",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorContactDetailTypeId = 3,
                            AuthorId = 2,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8773),
                            CreatedBy = "",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "stanislawlem@wp.pl",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.AuthorContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthorContactDetailTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Book.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("PublishedBookDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8801),
                            CreatedBy = "",
                            GenreId = 1,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Ogniem i Mieczem",
                            Price = 10m,
                            PublishedBookDate = new DateTime(1884, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8864),
                            CreatedBy = "",
                            GenreId = 2,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Potop",
                            Price = 15m,
                            PublishedBookDate = new DateTime(1886, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8867),
                            CreatedBy = "",
                            GenreId = 3,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Pan Wołodyjowski",
                            Price = 11m,
                            PublishedBookDate = new DateTime(1888, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8869),
                            CreatedBy = "",
                            GenreId = 1,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Quo Vadis",
                            Price = 12m,
                            PublishedBookDate = new DateTime(1896, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8872),
                            CreatedBy = "",
                            GenreId = 1,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Krzyżacy",
                            Price = 14m,
                            PublishedBookDate = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8874),
                            CreatedBy = "",
                            GenreId = 1,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Wejście na orbitę",
                            Price = 14m,
                            PublishedBookDate = new DateTime(1962, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8876),
                            CreatedBy = "",
                            GenreId = 2,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Summa technologiae",
                            Price = 14m,
                            PublishedBookDate = new DateTime(1964, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8879),
                            CreatedBy = "",
                            GenreId = 3,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Filozofia przypadku",
                            Price = 14m,
                            PublishedBookDate = new DateTime(1968, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Book.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Historical Novel"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8900),
                            CreatedBy = "",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8903),
                            CreatedBy = "",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerAddressTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Address of residence"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Residences"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerContactDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerContactDetailTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContactDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactName = "piotrCz@example.com",
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(9124),
                            CreatedBy = "",
                            CustomerContactDetailTypeId = 2,
                            CustomerId = 1,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContactName = "olaSa@example.coms",
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(9129),
                            CreatedBy = "",
                            CustomerContactDetailTypeId = 2,
                            CustomerId = 2,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerContactDetailTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Phone"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerAddressTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAddressTypeId");

                    b.HasIndex("CustomerDetailTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(8936),
                            CreatedBy = "",
                            CustomerAddressTypeId = 1,
                            CustomerDetailTypeId = 1,
                            CustomerId = 1,
                            FirstName = "Piotr",
                            InactivatedBy = "",
                            LastName = "Cz",
                            ModifiedBy = "",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(9040),
                            CreatedBy = "",
                            CustomerAddressTypeId = 2,
                            CustomerDetailTypeId = 2,
                            CustomerId = 2,
                            FirstName = "Ola",
                            InactivatedBy = "",
                            LastName = "Sa",
                            ModifiedBy = "",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerDetailTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Private person"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Entrepreneur"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<decimal>("BookPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderTransportTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderTransportTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            BookPrice = 10m,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(9196),
                            CreatedBy = "",
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Ogniem i Mieczem",
                            OrderDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPrice = 22m,
                            OrderTransportTypeId = 1,
                            PaymentMethodId = 1,
                            Quantity = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            BookPrice = 15m,
                            Created = new DateTime(2022, 9, 18, 22, 4, 45, 236, DateTimeKind.Local).AddTicks(9202),
                            CreatedBy = "",
                            CustomerId = 2,
                            DeliveryDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Potop",
                            OrderDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderPrice = 33m,
                            OrderTransportTypeId = 2,
                            PaymentMethodId = 1,
                            Quantity = 2,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Order.OrderTransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderTransportTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Paczkomat"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kurier"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Order.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mobile payments"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electronic bank transfers"
                        });
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.Author", b =>
                {
                    b.OwnsOne("BookstoreManagement.Domain.ValueObjects.PersonName", "AuthorName", b1 =>
                        {
                            b1.Property<int>("AuthorId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("AuthorId");

                            b1.ToTable("Authors");

                            b1.WithOwner()
                                .HasForeignKey("AuthorId");

                            b1.HasData(
                                new
                                {
                                    AuthorId = 1,
                                    FirstName = "Henryk",
                                    LastName = "Sienkiewicz"
                                },
                                new
                                {
                                    AuthorId = 2,
                                    FirstName = "Stanisław",
                                    LastName = "Lem"
                                });
                        });

                    b.Navigation("AuthorName")
                        .IsRequired();
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.AuthorBiography", b =>
                {
                    b.HasOne("BookstoreManagement.Domain.Entities.Author.Author", "Author")
                        .WithOne("AuthorBiography")
                        .HasForeignKey("BookstoreManagement.Domain.Entities.Author.AuthorBiography", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.AuthorContactDetail", b =>
                {
                    b.HasOne("BookstoreManagement.Domain.Entities.Author.AuthorContactDetailType", "AuthorContactDetailType")
                        .WithMany("AuthorContactDetails")
                        .HasForeignKey("AuthorContactDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Author.Author", "Author")
                        .WithMany("AuthorContactDetails")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("AuthorContactDetailType");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Book.Book", b =>
                {
                    b.HasOne("BookstoreManagement.Domain.Entities.Author.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Book.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerContactDetail", b =>
                {
                    b.HasOne("BookstoreManagement.Domain.Entities.Customer.CustomerContactDetailType", "CustomerContactDetailType")
                        .WithMany("CustomerContactDetails")
                        .HasForeignKey("CustomerContactDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Customer.Customer", "Customer")
                        .WithMany("CustomerContactDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerContactDetailType");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerDetail", b =>
                {
                    b.HasOne("BookstoreManagement.Domain.Entities.Customer.CustomerAddressType", "CustomerAddressType")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CustomerAddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Customer.CustomerDetailType", "CustomerDetailType")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CustomerDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Customer.Customer", "Customer")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookstoreManagement.Domain.ValueObjects.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("CustomerDetailId")
                                .HasColumnType("int");

                            b1.Property<int>("ApartmentNumber")
                                .HasColumnType("int")
                                .HasColumnName("ApartmentNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<int>("HouseNumber")
                                .HasColumnType("int")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("CustomerDetailId");

                            b1.ToTable("CustomerDetails");

                            b1.WithOwner()
                                .HasForeignKey("CustomerDetailId");

                            b1.HasData(
                                new
                                {
                                    CustomerDetailId = 1,
                                    ApartmentNumber = 12,
                                    City = "Warsaw",
                                    Country = "Poland",
                                    HouseNumber = 12,
                                    Street = "Warszawska",
                                    ZipCode = "01-001"
                                },
                                new
                                {
                                    CustomerDetailId = 2,
                                    ApartmentNumber = 10,
                                    City = "Cracow",
                                    Country = "Poland",
                                    HouseNumber = 10,
                                    Street = "Krakowska",
                                    ZipCode = "01-001"
                                });
                        });

                    b.Navigation("Adres")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerAddressType");

                    b.Navigation("CustomerDetailType");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Order.Order", b =>
                {
                    b.HasOne("BookstoreManagement.Domain.Entities.Book.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Customer.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Order.OrderTransportType", "OrderTransportType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreManagement.Domain.Entities.Order.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("OrderTransportType");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.Author", b =>
                {
                    b.Navigation("AuthorBiography")
                        .IsRequired();

                    b.Navigation("AuthorContactDetails");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Author.AuthorContactDetailType", b =>
                {
                    b.Navigation("AuthorContactDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Book.Book", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Book.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.Customer", b =>
                {
                    b.Navigation("CustomerContactDetails");

                    b.Navigation("CustomerDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerAddressType", b =>
                {
                    b.Navigation("CustomerDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerContactDetailType", b =>
                {
                    b.Navigation("CustomerContactDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Customer.CustomerDetailType", b =>
                {
                    b.Navigation("CustomerDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Order.OrderTransportType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Domain.Entities.Order.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
